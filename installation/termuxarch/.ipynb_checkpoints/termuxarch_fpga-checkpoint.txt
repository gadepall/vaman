#login as user
startarch l user
sudo pacman -Syu
sudo pacman -S base-devel  tcl python-lxml python-simplejson 
cd /home/user/txhome


#Pull all necessary tools
#Need to check if pygmy-sdk can be reduced by keeping only the basic hardware
#components.
git clone --recursive https://github.com/optimuslogic/pygmy-dev

#Create directory for building the toolchain
mkdir -p symbiflow
export  INSTALL_DIR=/data/data/com.termux/files/home/symbiflow

#Download and extract symbiflow
https://iith-my.sharepoint.com/:u:/g/personal/gadepall_ee_iith_ac_in/Ebot5QHEYXBAo-7n4hnvJu0B8vMrTIdj_COHJC2cmDY1ww?e=bqDxHI

cp arch.tar.gz /data/data/com.termux/files/home/arch.tar.gz
#Ignore the following
#curl $(curl https://storage.googleapis.com/symbiflow-arch-defs-install/latest) > /data/data/com.termux/files/home/arch.tar.gz

tar -C $INSTALL_DIR -xvf /data/data/com.termux/files/home/arch.tar.gz

export PATH="$INSTALL_DIR/quicklogic-arch-defs/bin:$INSTALL_DIR/quicklogic-arch-defs/bin/python:$PATH"

#Install fasm 
cd /data/data/com.termux/files/home/pygmy-dev/tools/quicklogic-fasm
sudo pip install -r requirements.txt
sudo python setup.py install
cd /data/data/com.termux/files/home/

#Install yosys
cd /data/data/com.termux/files/home/pygmy-dev/tools/quicklogic-yosys
make config-gcc
make -j4 install PREFIX=$INSTALL_DIR
cd /data/data/com.termux/files/home/

#install yosys-symbiflow
cd /data/data/com.termux/files/home/pygmy-dev/tools/yosys-symbiflow-plugins
export PATH=$INSTALL_DIR/bin:$PATH
make -j4 install
cd /data/data/com.termux/files/home/

#install vtr
cd /data/data/com.termux/files/home/pygmy-dev/tools/vtr-verilog-to-routing
make -j4
cd /data/data/com.termux/files/home/


cp /data/data/com.termux/files/home/pygmy-dev/tools/vtr-verilog-to-routing/build/vpr/vpr $INSTALL_DIR/bin
cp /data/data/com.termux/files/home/pygmy-dev/tools/vtr-verilog-to-routing/build/utils/fasm/genfasm $INSTALL_DIR/bin

#add path to .bashrc
nano /home/user/.bashrc
#paste the following 3 lines at the end of the file
export  INSTALL_DIR=/data/data/com.termux/files/home/symbiflow
export PATH="$INSTALL_DIR/quicklogic-arch-defs/bin:$INSTALL_DIR/quicklogic-arch-defs/bin/python:$PATH"
export PATH=/data/data/com.termux/files/home/symbiflow/bin:$PATH
#Ctrl+X save and exit.  reboot for the settings to be updated.
exit
#After login
cd /data/data/com.termux/files/home/


#Check the executables on Path
vpr -h
yosys -h
qlfasm -h
ql_symbiflow -h

#Test installation
cd $INSTALL_DIR/quicklogic-arch-defs/tests/counter_16bit
ql_symbiflow -compile -d ql-eos-s3 -P pd64 -v counter_16bit.v -t top -p chandalar.pcf -dump binary
#top.bin must be generated successfully 

#Blink program
cd /data/data/com.termux/files/home/
mkdir fpga-examples
cd fpga-examples
svn co https://github.com/gadepall/vaman/trunk/fpga/setup/codes/blink
ql_symbiflow -compile -src /data/data/com.termux/files/home/fpga-examples/blink -d ql-eos-s3 -P PU64 -v helloworldfpga.v -t helloworldfpga -p quickfeather.pcf -dump binary
#helloworldfpga.bin must be generated successfully in /data/data/com.termux/files/home/blink

#Transfer .bin file to RPI from texmuxarch
scp /data/data/com.termux/files/home/blink/helloworldfpga.bin storage/emulated/0/Download/blink/helloworldfpga.bin pi@192.168.0.114:


#On RPi
git clone --recursive https://github.com/QuickLogic-Corp/TinyFPGA-Programmer-Application.git
sudo pip3 install tinyfpgab pyserial
sudo reboot

#Install Python libraries (on device connecting pygmy to usb)
#sudo pip install wheel python-constraint serial tinyfpgab apio

#Now flashing to the board through usb
#sudo apio drivers --serial-enable

#On RPI execute the following 

sudo python3 /home/pi/TinyFPGA-Programmer-Application/tinyfpga-programmer-gui.py --port /dev/ttyACM0 --appfpga /home/pi/helloworldfpga.bin --mode fpga

#End FPGA hello world





